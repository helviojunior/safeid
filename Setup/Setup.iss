; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define AppName "SafeId"
#define SrcApp "..\PKGTemp\IAMServer\IAMEngine.exe"
#define FileVerStr GetFileVersion(SrcApp)
#define StripBuild(str VerStr) Copy(VerStr, 1, RPos(".", VerStr)-1)
#define AppVerStr StripBuild(FileVerStr)
#define SrcPath "..\PKGTemp\"
#define PreReqsPath ".\SetupPreReqs\"
#define ThisPath ".\"
#define DateTimeString GetDateTimeString('yyyy-mm-dd-hh-nn', '', '');

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{0FF5D4D1-E233-4DEB-926F-9CC5C92873DA}
AppPublisher=SafeTrend
AppName={#AppName}
AppVersion={#AppVerStr}
AppVerName={#AppName} {#AppVerStr}
UninstallDisplayName=SafeId - {#AppName} v{#AppVerStr}
VersionInfoVersion={#FileVerStr}
VersionInfoTextVersion={#AppVerStr}
;OutputBaseFilename=safeid-server-{#FileVerStr}-install
OutputBaseFilename=safeid-server-{#DateTimeString}-install
AppPublisherURL=http://www.safetrend.com.br/
AppSupportURL=http://www.safetrend.com.br/
AppUpdatesURL=http://www.safetrend.com.br/
DefaultDirName=C:\SafeId
DefaultGroupName=SafeTrend\SafeId
OutputDir={#ThisPath}
Compression=lzma
SolidCompression=yes
AlwaysRestart=no
CloseApplications=yes
CloseApplicationsFilter=*.exe

[Languages]
Name: "brazilianportuguese"; MessagesFile: "compiler:Languages\BrazilianPortuguese.isl"
Name: "english"; MessagesFile: "compiler:Default.isl"

[Types]
Name: "full"; Description: "{cm:typefull}"
Name: "web"; Description: "{cm:typeweb}"
Name: "app"; Description: "{cm:typeapp}"
Name: "proxy"; Description: "{cm:typeproxy}"
Name: "custom"; Description: "{cm:typecustom}"; Flags: iscustom


[Components]
Name: "main"; Description: "{cm:compmain}"; Types: full custom; Flags: fixed
Name: "webserver"; Description: "{cm:compwebserver}"; Types: full web
Name: "casserver"; Description: "{cm:compcasserver}"; Types: full web
Name: "appserver"; Description: "{cm:compappserver}"; Types: full app
Name: "proxy"; Description: "{cm:compproxy}"; Types: full proxy

;[Tasks]
;Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked
;Name: "quicklaunchicon"; Description: "{cm:CreateQuickLaunchIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked; OnlyBelowVersion: 0,6.1

[Files]
Source: "{#SrcPath}IAMCas\*"; DestDir: "{app}\IAMCas"; Components: casserver; Flags: ignoreversion createallsubdirs recursesubdirs
Source: "{#SrcPath}IAMServer\*"; DestDir: "{app}\IAMServer"; Excludes: "Web"; Components: appserver; Flags: ignoreversion createallsubdirs recursesubdirs
Source: "{#SrcPath}IAMServer\web\*"; DestDir: "{app}\IAMServer\web"; Components: webserver; Flags: ignoreversion createallsubdirs recursesubdirs
Source: "{#SrcPath}IAMProxy\*"; DestDir: "{app}\IAMProxy"; Components: proxy; Flags: ignoreversion createallsubdirs recursesubdirs

;Config Files
Source: "{#ThisPath}Web-server.config"; DestDir: "{app}\IAMServer\web\"; DestName: "Web.config"; Components: webserver; Flags: onlyifdoesntexist uninsneveruninstall
Source: "{#ThisPath}Web-cas.config"; DestDir: "{app}\IAMCas\"; DestName: "Web.config"; Components: casserver; Flags: onlyifdoesntexist uninsneveruninstall
Source: "{#ThisPath}cas-sample.conf"; DestDir: "{app}\IAMCas\App_Data\config\"; DestName: "sample.conf"; Components: casserver; Flags: onlyifdoesntexist uninsneveruninstall
Source: "{#ThisPath}server.conf"; DestDir: "{app}\IAMServer\"; DestName: "server.conf"; Components: appserver; Flags: onlyifdoesntexist uninsneveruninstall


;Temp Dir
Source: "{#SrcPath}IAMInstall\*"; DestDir: "{app}\temp"; Components: appserver; Flags: ignoreversion createallsubdirs recursesubdirs deleteafterinstall
Source: "{#PreReqsPath}vcredist_x86.exe"; DestDir: "{tmp}"; Components: main; Flags: ignoreversion deleteafterinstall
Source: "{#PreReqsPath}vcredist_x64.exe"; DestDir: "{tmp}"; Components: main; Flags: ignoreversion deleteafterinstall
Source: "{#PreReqsPath}dotNetFx40_Full_x86_x64.exe"; DestDir: "{tmp}"; Components: main; Flags: ignoreversion deleteafterinstall; Check: not IsRequiredDotNet40
;Source: "{#PreReqsPath}dotNetFx45_Full_x86_x64.exe"; DestDir: "{tmp}"; Components: main; Flags: ignoreversion deleteafterinstall; Check: not IsRequiredDotNet45
Source: "{#PreReqsPath}AccessDatabaseEngine.exe"; DestDir: "{tmp}"; Components: main; Flags: ignoreversion deleteafterinstall;
;Source: "{#PreReqsPath}AccessDatabaseEngine_x64.exe"; DestDir: "{tmp}"; Components: main; Flags: ignoreversion deleteafterinstall; Check: IsWin64();
;Source: {#SrcPath}BroadcastConfig.dll; DestDir: {app}; Flags: ignoreversion;

[Run]
;Server
Filename: "{tmp}\vcredist_x86.exe"; Parameters: "/passive /Q:a /c:""msiexec /qb /i vcredist.msi"""; StatusMsg: "{cm:instcx86}"; Components: main; Check: VCRedistNeedsInstall
Filename: "{tmp}\vcredist_x64.exe"; Parameters: "/passive /Q:a /c:""msiexec /qb /i vcredist.msi"""; StatusMsg: "{cm:instcx64}"; Components: main; Check: VCRedistNeedsInstall
Filename: "{tmp}\dotNetFx40_Full_x86_x64.exe"; Parameters: "/q:a /c:""install /l /q"""; StatusMsg: "{cm:instdotnet40}"; Components: main; Check: not IsRequiredDotNet40
;Filename: "{tmp}\dotNetFx45_Full_x86_x64.exe"; Parameters: "/q:a /c:""install /l /q"""; StatusMsg: "{cm:instdotnet45}"; Components: main; Check: not IsRequiredDotNet45
Filename: "{tmp}\AccessDatabaseEngine.exe"; Parameters: "/passive /norestart"; StatusMsg: "{cm:instade}"; Components: main;
;Filename: "{tmp}\AccessDatabaseEngine_x64.exe"; Parameters: "/passive /norestart"; StatusMsg: "{cm:instade64}"; Components: main; Check: IsWin64();
Filename: "{app}\IAMServer\IAMDispatcher.exe"; Parameters: "--install"; WorkingDir: "{app}\IAMServer"; Flags: waituntilterminated runhidden; Description: "{cm:installingservices}"; Components: appserver
Filename: "{app}\IAMServer\IAMEngine.exe"; Parameters: "--install"; WorkingDir: "{app}\IAMServer"; Flags: waituntilterminated runhidden; Description: "{cm:installingservices}"; Components: appserver
Filename: "{app}\IAMServer\IAMInbound.exe"; Parameters: "--install"; WorkingDir: "{app}\IAMServer"; Flags: waituntilterminated runhidden; Description: "{cm:installingservices}"; Components: appserver
Filename: "{app}\IAMServer\IAMMessenger.exe"; Parameters: "--install"; WorkingDir: "{app}\IAMServer"; Flags: waituntilterminated runhidden; Description: "{cm:installingservices}"; Components: appserver
Filename: "{app}\IAMServer\IAMReport.exe"; Parameters: "--install"; WorkingDir: "{app}\IAMServer"; Flags: waituntilterminated runhidden; Description: "{cm:installingservices}"; Components: appserver
Filename: "{app}\IAMServer\IAMWatchdog.exe"; Parameters: "--install"; WorkingDir: "{app}\IAMServer"; Flags: waituntilterminated runhidden; Description: "{cm:installingservices}"; Components: appserver
Filename: "{app}\IAMServer\IAMWorkflowProcessor.exe"; Parameters: "--install"; WorkingDir: "{app}"; Flags: waituntilterminated runhidden; Description: "{cm:installingservices}"; Components: appserver
;Proxy
Filename: "{app}\IAMProxy\IAMMultiProxy.exe"; Parameters: "--install"; WorkingDir: "{app}\IAMProxy"; Flags: waituntilterminated runhidden; Description: "{cm:installingservices}"; Components: proxy
;Processo de configuiração final
Filename: "{app}\temp\InstallWizard.exe"; Parameters: "{app} {uninstallexe}"; WorkingDir: "{app}\temp"; Flags: skipifsilent waituntilterminated hidewizard; Components: appserver; Check: not IsUpgrade()
Filename: "{win}\system32\net.exe"; Parameters: "start ""IAMWatchdog"""; WorkingDir: "{app}"; Flags: waituntilterminated runhidden; Description: "{cm:installingservices}"; 

[UninstallRun]
;Server
Filename: "{win}\system32\net.exe"; Parameters: "stop ""IAMWatchdog"""; WorkingDir: "{app}"; Flags: waituntilterminated runhidden; 
Filename: "{app}\IAMServer\IAMWatchdog.exe"; Parameters: "--uninstall"; WorkingDir: "{app}\IAMServer"; Flags: runhidden waituntilterminated
Filename: "{app}\IAMServer\IAMDispatcher.exe"; Parameters: "--uninstall"; WorkingDir: "{app}\IAMServer"; Flags: runhidden waituntilterminated
Filename: "{app}\IAMServer\IAMEngine.exe"; Parameters: "--uninstall"; WorkingDir: "{app}\IAMServer"; Flags: runhidden waituntilterminated
Filename: "{app}\IAMServer\IAMInbound.exe"; Parameters: "--uninstall"; WorkingDir: "{app}\IAMServer"; Flags: runhidden waituntilterminated
Filename: "{app}\IAMServer\IAMMessenger.exe"; Parameters: "--uninstall"; WorkingDir: "{app}\IAMServer"; Flags: runhidden waituntilterminated
Filename: "{app}\IAMServer\IAMReport.exe"; Parameters: "--uninstall"; WorkingDir: "{app}\IAMServer"; Flags: runhidden waituntilterminated
Filename: "{app}\IAMServer\IAMWorkflowProcessor.exe"; Parameters: "--uninstall"; WorkingDir: "{app}\IAMServer"; Flags: runhidden waituntilterminated
;Proxy
Filename: "{app}\IAMProxy\IAMMultiProxy.exe"; Parameters: "--uninstall"; WorkingDir: "{app}\IAMProxy"; Flags: runhidden waituntilterminated

[CustomMessages]
english.confirmuninstall=A previous version is already installed. Do you want to uninstall the existing version?
brazilianportuguese.confirmuninstall=Uma versão anterior já está instalada. Deseja desinstalar a versão atual?
english.uninstallerror=Error uninstalling the currently installed version. Uninstall the existing version (In the Control Panel select Add Remove Programs) before running this setup.
brazilianportuguese.uninstallerror=Erro ao desinstalar a versão atualmente instalada. Desinstale a versão existente (No Painel de Controle, selecione Adicionar ou Remover Programas) antes de executar esta instalação.
english.dotnet35=This application requires Microsoft .NET Framework 3.5.#13#13Please use Windows Update to install this version,#13and then re-run the setup program.
brazilianportuguese.dotnet35=Esta aplicação requer Microsoft .NET Framework 3.5.#13#13Favor instalar esta versão,#13e execute o instalador novamente.
english.dotnet40=This application requires Microsoft .NET Framework 4.0 Full.#13#13Please use Windows Update to install this version,#13and then re-run the setup program.
brazilianportuguese.dotnet40=Esta aplicação requer Microsoft .NET Framework 4.0.#13#13Favor instalar esta versão,#13e execute o instalador novamente.
english.dotnet44=This application requires Microsoft .NET Framework 4.5.#13#13Please use Windows Update to install this version,#13and then re-run the setup program.
brazilianportuguese.dotnet44=Esta aplicação requer Microsoft .NET Framework 4.5.#13#13Favor instalar esta versão,#13e execute o instalador novamente.
english.installingservices=Installing services...
brazilianportuguese.installingservices=Instalando serviços...
english.instcx86=Installing Visual C++ 2010 (x86) RunTime. Please wait...
brazilianportuguese.instcx86=Instalando Visual C++ 2010 (x86)...
english.instcx64=Installing Visual C++ 2010 (x64) RunTime. Please wait...
brazilianportuguese.instcx64=Instalando Visual C++ 2010 (x64)...
english.instdotnet40=Installing Microsoft Framework 4.0 Full. Please wait... 
brazilianportuguese.instdotnet40=Instalando Microsoft Framework 4.0... 
english.instdotnet45=Installing Microsoft Framework 4.5. Please wait... 
brazilianportuguese.instdotnet45=Instalando Microsoft Framework 4.5... 
english.instade=Installing Access Database Engine 2010 (x86). Please wait...
brazilianportuguese.instade=Instalando Access Database Engine 2010 (x86)...
english.instade64=Installing Access Database Engine 2010 (x64). Please wait...
brazilianportuguese.instade64=Instalando Access Database Engine 2010 (x64)...
english.typefull=Full installation
brazilianportuguese.typefull=Aplicação completa
english.typeweb=Web server installation
brazilianportuguese.typeweb=Servidor Web
english.typeapp=Application server installation
brazilianportuguese.typeapp=Servidor de aplicação
english.typeproxy=Proxy server installation
brazilianportuguese.typeproxy=Proxy
english.typecustom=Custom installation
brazilianportuguese.typecustom=Customizado
english.compmain=Main files 
brazilianportuguese.compmain=Arquivos base
english.compwebserver=Web server (API, Admin and Autoservice)
brazilianportuguese.compwebserver=Servidor Web (API, Admin e Autoserviço)
english.compcasserver=Cas server
brazilianportuguese.compcasserver=Servidor Cas
english.compappserver=Application server
brazilianportuguese.compappserver=Servidor de aplicação
english.compproxy=Proxy
brazilianportuguese.compproxy=Proxy


[PreCompile]
Name: "K:\Devel\IAM\_BuildPackage (update folder).cmd"; Flags: abortonerror

[code]
var 
  IsUpdgradeSoftware : Boolean;

#IFDEF UNICODE
  #DEFINE AW "W"
#ELSE
  #DEFINE AW "A"
#ENDIF
type
  INSTALLSTATE = Longint;
const
  INSTALLSTATE_INVALIDARG = -2;  // An invalid parameter was passed to the function.
  INSTALLSTATE_UNKNOWN = -1;     // The product is neither advertised or installed.
  INSTALLSTATE_ADVERTISED = 1;   // The product is advertised but not installed.
  INSTALLSTATE_ABSENT = 2;       // The product is installed for a different user.
  INSTALLSTATE_DEFAULT = 5;      // The product is installed for the current user.

  VC_2005_REDIST_X86 = '{A49F249F-0C91-497F-86DF-B2585E8E76B7}';
  VC_2005_REDIST_X64 = '{6E8E85E8-CE4B-4FF5-91F7-04999C9FAE6A}';
  VC_2005_REDIST_IA64 = '{03ED71EA-F531-4927-AABD-1C31BCE8E187}';
  VC_2005_SP1_REDIST_X86 = '{7299052B-02A4-4627-81F2-1818DA5D550D}';
  VC_2005_SP1_REDIST_X64 = '{071C9B48-7C32-4621-A0AC-3F809523288F}';
  VC_2005_SP1_REDIST_IA64 = '{0F8FB34E-675E-42ED-850B-29D98C2ECE08}';
  VC_2005_SP1_ATL_SEC_UPD_REDIST_X86 = '{837B34E3-7C30-493C-8F6A-2B0F04E2912C}';
  VC_2005_SP1_ATL_SEC_UPD_REDIST_X64 = '{6CE5BAE9-D3CA-4B99-891A-1DC6C118A5FC}';
  VC_2005_SP1_ATL_SEC_UPD_REDIST_IA64 = '{85025851-A784-46D8-950D-05CB3CA43A13}';

  VC_2008_REDIST_X86 = '{FF66E9F6-83E7-3A3E-AF14-8DE9A809A6A4}';
  VC_2008_REDIST_X64 = '{350AA351-21FA-3270-8B7A-835434E766AD}';
  VC_2008_REDIST_IA64 = '{2B547B43-DB50-3139-9EBE-37D419E0F5FA}';
  VC_2008_SP1_REDIST_X86 = '{9A25302D-30C0-39D9-BD6F-21E6EC160475}';
  VC_2008_SP1_REDIST_X64 = '{8220EEFE-38CD-377E-8595-13398D740ACE}';
  VC_2008_SP1_REDIST_IA64 = '{5827ECE1-AEB0-328E-B813-6FC68622C1F9}';
  VC_2008_SP1_ATL_SEC_UPD_REDIST_X86 = '{1F1C2DFC-2D24-3E06-BCB8-725134ADF989}';
  VC_2008_SP1_ATL_SEC_UPD_REDIST_X64 = '{4B6C7001-C7D6-3710-913E-5BC23FCE91E6}';
  VC_2008_SP1_ATL_SEC_UPD_REDIST_IA64 = '{977AD349-C2A8-39DD-9273-285C08987C7B}';
  VC_2008_SP1_MFC_SEC_UPD_REDIST_X86 = '{9BE518E6-ECC6-35A9-88E4-87755C07200F}';
  VC_2008_SP1_MFC_SEC_UPD_REDIST_X64 = '{5FCE6D76-F5DC-37AB-B2B8-22AB8CEDB1D4}';
  VC_2008_SP1_MFC_SEC_UPD_REDIST_IA64 = '{515643D1-4E9E-342F-A75A-D1F16448DC04}';

  VC_2010_REDIST_X86 = '{196BB40D-1578-3D01-B289-BEFC77A11A1E}';
  VC_2010_REDIST_X64 = '{DA5E371C-6333-3D8A-93A4-6FD5B20BCC6E}';
  VC_2010_REDIST_IA64 = '{C1A35166-4301-38E9-BA67-02823AD72A1B}';
  VC_2010_SP1_REDIST_X86 = '{F0C3E5D1-1ADE-321E-8167-68EF0DE699A5}';
  VC_2010_SP1_REDIST_X64 = '{1D8E6291-B0D5-35EC-8441-6616F567A0F7}';
  VC_2010_SP1_REDIST_IA64 = '{88C73C1C-2DE5-3B01-AFB8-B46EF4AB41CD}';

/////////////////////////////////////////////////////////////////////
function GetUninstallString(): String;
var
  sUnInstPath: String;
  sUnInstallString: String;
begin
  sUnInstPath := ExpandConstant('Software\Microsoft\Windows\CurrentVersion\Uninstall\{#emit SetupSetting("AppId")}_is1');
  sUnInstallString := '';
  if not RegQueryStringValue(HKLM, sUnInstPath, 'UninstallString', sUnInstallString) then
    RegQueryStringValue(HKCU, sUnInstPath, 'UninstallString', sUnInstallString);
  Result := sUnInstallString;
end;


/////////////////////////////////////////////////////////////////////
function IsUpgrade(): Boolean;
begin
  //Result := (GetUninstallString() <> '');
  Result := IsUpdgradeSoftware;
end;


/////////////////////////////////////////////////////////////////////
function UnInstallOldVersion(): Integer;
var
  sUnInstallString: String;
  iResultCode: Integer;
  Result1 : Boolean;
begin
// Return Values:
// 1 - uninstall string is empty
// 2 - error executing the UnInstallString
// 3 - successfully executed the UnInstallString

  // default return value
  Result := 0;

  // get the uninstall string of the old app
  sUnInstallString := GetUninstallString();
  if sUnInstallString <> '' then begin
    Result1 := MsgBox(ExpandConstant('{cm:confirmuninstall}'),
						mbConfirmation, MB_YESNO) = idYes;
		if Result1 =true then
		begin	
      sUnInstallString := RemoveQuotes(sUnInstallString);
      if Exec(sUnInstallString, '/SILENT /NORESTART /SUPPRESSMSGBOXES','', SW_HIDE, ewWaitUntilTerminated, iResultCode) then
        Result := 3
      else
        Result := 2;
    end  else
      Result := 2;
  end else
    Result := 1;
end;

/////////////////////////////////////////////////////////////////////
procedure CurStepChanged(CurStep: TSetupStep);
begin
  if (CurStep=ssInstall) then
  begin
    if (IsUpgrade()) then
    begin
      UnInstallOldVersion();
    end;
  end;
end;

function IsDotNetDetected(version: string; service: cardinal): boolean;
// Indicates whether the specified version and service pack of the .NET Framework is installed.
//
// version -- Specify one of these strings for the required .NET Framework version:
//    'v1.1.4322'     .NET Framework 1.1
//    'v2.0.50727'    .NET Framework 2.0
//    'v3.0'          .NET Framework 3.0
//    'v3.5'          .NET Framework 3.5
//    'v4\Client'     .NET Framework 4.0 Client Profile
//    'v4\Full'       .NET Framework 4.0 Full Installation
//    'v4.5'          .NET Framework 4.5
//
// service -- Specify any non-negative integer for the required service pack level:
//    0               No service packs required
//    1, 2, etc.      Service pack 1, 2, etc. required
var
    key: string;
    install, release, serviceCount: cardinal;
    check45, success: boolean;
begin
    // .NET 4.5 installs as update to .NET 4.0 Full
    if version = 'v4.5' then begin
        version := 'v4\Full';
        check45 := true;
    end else
        check45 := false;

    // installation key group for all .NET versions
    key := 'SOFTWARE\Microsoft\NET Framework Setup\NDP\' + version;

    // .NET 3.0 uses value InstallSuccess in subkey Setup
    if Pos('v3.0', version) = 1 then begin
        success := RegQueryDWordValue(HKLM, key + '\Setup', 'InstallSuccess', install);
    end else begin
        success := RegQueryDWordValue(HKLM, key, 'Install', install);
    end;

    // .NET 4.0/4.5 uses value Servicing instead of SP
    if Pos('v4', version) = 1 then begin
        success := success and RegQueryDWordValue(HKLM, key, 'Servicing', serviceCount);
    end else begin
        success := success and RegQueryDWordValue(HKLM, key, 'SP', serviceCount);
    end;

    // .NET 4.5 uses additional value Release
    if check45 then begin
        success := success and RegQueryDWordValue(HKLM, key, 'Release', release);
        success := success and (release >= 378389);
    end;

    result := success and (install = 1) and (serviceCount >= service);
end;

function IsRequiredDotNet40(): Boolean;  
begin
    result := IsDotNetDetected('v4\Full', 0);
end;


function IsRequiredDotNet45(): Boolean;  
begin
    result := IsDotNetDetected('v4.5', 0);
end;

function MsiQueryProductState(szProduct: string): INSTALLSTATE; 
  external 'MsiQueryProductState{#AW}@msi.dll stdcall';

function VCVersionInstalled(const ProductID: string): Boolean;
begin
  Result := MsiQueryProductState(ProductID) = INSTALLSTATE_DEFAULT;
end;

function VCRedistNeedsInstall: Boolean;
begin
  // here the Result must be True when you need to install your VCRedist
  // or False when you don't need to, so now it's upon you how you build
  // this statement, the following won't install your VC redist only when
  // the Visual C++ 2010 Redist (x86) and Visual C++ 2010 SP1 Redist(x86)
  // are installed for the current user
  Result := not (VCVersionInstalled(VC_2010_REDIST_X86) and 
    VCVersionInstalled(VC_2010_SP1_REDIST_X86));
end;

function createRestorePoint(RestoreName : String; RestorePointType, EventType : Integer): boolean;
var
  ScriptControl,
  sr: Variant;
begin
  ScriptControl := CreateOleObject('ScriptControl');
  ScriptControl.Language := 'VBScript';
  sr := ScriptControl.Eval('getobject("winmgmts:\\.\root\default:Systemrestore")');
  Result := (sr.CreateRestorePoint(RestoreName, RestorePointType, EventType) = 0);
end;
  

function InitializeSetup(): Boolean;
var
    //ErrorCode: Integer;
    //NetFrameWorkInstalled : Boolean;
    //Result1 : Boolean;
    PrevInst : Integer;
begin


  //Verifica .NET 3.5 Full
  if not IsDotNetDetected('v3.5', 0) then 
  begin
    MsgBox(ExpandConstant('{cm:dotnet35}'), mbInformation, MB_OK);
        Result := false;
  end else
  begin
        Result := true;
  end;

  IsUpdgradeSoftware := (GetUninstallString() <> '');


  //Verifica .NET 4.0 Full
  //if not IsDotNetDetected('v4\Full', 0) then 
  //begin
  //  MsgBox(ExpandConstant('{cm:dotnet40}'), mbInformation, MB_OK);
  //      Result := false;
  //end else
  //begin
  //      Result := true;
  //end;

  //Verifica .NET 4.5 Full
  //if not IsDotNetDetected('v4.5', 0) then 
  //begin
  //  MsgBox(ExpandConstant('{cm:dotnet45}'), mbInformation, MB_OK);
  //      Result := false;
  //end else
  //begin
  //      Result := true;
  //end;

	//Verifica se há uma versão anterior instalada
	PrevInst := UnInstallOldVersion();
	if PrevInst = 2 then
	begin
	   MsgBox(ExpandConstant('{cm:uninstallerror}'),
						mbError, MB_OK)
	   Result:=false;
	end; 
end;

[Registry]
;Root: HKLM; SubKey: SYSTEM\CurrentControlSet\services\Tcpip\Parameters; ValueType: dword; ValueName: TcpMaxDataRetransmissions; ValueData: 30; Flags: CreateValueIfDoesntExist;
